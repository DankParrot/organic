//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Organic.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Organic.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Table format:
        ///# type value key
        ///# value is a hex number that corresponds to the key
        ///# key is a specially formatted key:
        ///# _ is required whitespace
        ///# . is optional whitespace
        ///# %a is the &quot;a&quot; value
        ///# %b is the &quot;b&quot; value
        ///# $n is a literal value that is to be output after the instruction
        ///# &quot;n&quot; may increment from zero.
        ///# type is the type of entry: o for opcode, a and b for parameters.  n is a non-basic opcode.
        ///# In binary, these correspond to aaaaaabbbbbooooo
        ///########## OPCODES
        ///o 01 SET_%b.,.%a
        ///o  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DCPUtable {
            get {
                return ResourceManager.GetString("DCPUtable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Usage:
        ///    Organic.exe [parameters] &lt;input file&gt; [output file]
        ///
        ///Options:
        ///    
        ///    -h    --help                      Displays this message.
        ///    -o    --output &lt;file&gt;             An alternative way to specify the output file.
        ///          --input &lt;file&gt;              An alternative way to specify the input file.
        ///    -e    --equate [key] [value]      Adds an equate, with the same syntax as .equ.
        ///    -l    --listing [filename]        Outputs a listing to [filename].
        ///          --little-endian             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help {
            get {
                return ResourceManager.GetString("Help", resourceCulture);
            }
        }
    }
}
